extends /_layouts/single


append vars
  -
    var pageInfo = {
      path: '/d3-cb/ch11-1-charge-grav/',
      title: 'd3-cb chapter 11 | select',
      description: 'intro',
      pageClass: 'd3-cb-ch11-1-charge-grav'
    }

block main
  
  // some styling for the shapes below . hollow out 
  style.
    circle {
        fill: steelblue;
    }
    text {
        cursor: pointer;
        text-decoration: underline;
        fill: blue;
    }
 
  article.container
    h1
      scratch d3 ch01
    header
      :markdown-it(linkify langPrefix='highlight-')
        Let's start looking into the Force directed graph from the [d3-force](https://github.com/d3/d3/blob/master/API.md#forces-d3-force) module. It's called that because it draws a network graph and uses varios force metaphors (charge, gravity, center, collision, ..)   in order to layout the graph nodes position
      .svg-ex
        <div class="control-group">
          <button onclick="noForce()">
              No Force
          </button>
          <button onclick="repulsion()">
              Repulsion
          </button>
          <button onclick="gravity()">
              Gravity
          </button>
          <button onclick="positioningWithGravity()">
              Positioning with Gravity
          </button>
          <button onclick="positioningWithRepulsion()">
              Positioning with Repulsion
          </button>
      </div>
  



block footer_scripts

  script(type="text/javascript")(src="//d3js.org/d3.v4.min.js").
  script.js-main(type="text/javascript")(nonce="some-nonce").
  
    window.addEventListener("load", function(){
      
        var w = 1280, h = 800, r = 4.5,
            nodes = [],
            // initialize our force simulation 
            // simulation is a fancy name for a loop that runs noting each iteration (tick)
            // where events can happen and be responded to 
            // we'll have 
            force = d3.forceSimulation()
                    .velocityDecay(0.4) // 0 is when the network nodes keep moving 
                     // 1 means they stand still and don't bump into each other a lot (like they're in molasses)
                     
                    .alphaDecay(0) //the density of events. 1 very dense, 0 very sparse
                      
                    .force("collision", d3.forceCollide(r + 0.5).strength(1));
        var svg = d3.select(".svg-ex")
            .append("svg")
                .attr("width", w)
                .attr("height", h);
        force.on("tick", function () {
            svg.selectAll("circle")
                .attr("cx", function (d) {return d.x;})
                .attr("cy", function (d) {return d.y;});
        });
        svg.on("mousemove", function () {
            var point = d3.mouse(this),
                node = {x: point[0], y: point[1]}; // <-A
            svg.append("circle")
                    .data([node])
                .attr("class", "node")
                .attr("cx", function (d) {return d.x;})
                .attr("cy", function (d) {return d.y;})
                .attr("r", 1e-6)
            .transition()
                .attr("r", r)
            .transition()
                .delay(7000)
                .attr("r", 1e-6)
                .on("end", function () {
                    nodes.shift(); // <-B
                    force.nodes(nodes);
                })
                .remove();
            nodes.push(node); // <-C
            force.nodes(nodes);
        });
        function noForce(){
            force.force("charge", null);
            force.force("x", null);
            force.force("y", null);
            force.restart();
        }
        function repulsion(){
            force.force("charge", d3.forceManyBody().strength(-10));
            force.force("x", null);
            force.force("y", null);
            force.restart();
        }
        function gravity(){
            force.force("charge", d3.forceManyBody().strength(1));
            force.force("x", null);
            force.force("y", null);
            force.restart();
        }
        function positioningWithGravity(){
            force.force("charge", d3.forceManyBody().strength(0.5));
            force.force("x", d3.forceX(w / 2));
            force.force("y", d3.forceY(h / 2));
            force.restart();
        }
        function positioningWithRepulsion(){
            force.force("charge", d3.forceManyBody().strength(-20));
            force.force("x", d3.forceX(w / 2));
            force.force("y", d3.forceY(h / 2));
            force.restart();
        }
    });
