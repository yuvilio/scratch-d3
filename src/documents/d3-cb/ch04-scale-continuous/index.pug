extends /_layouts/single


append vars
  -
    var pageInfo = {
      path: '/d3-cb/ch02-select/',
      title: 'd3-cb chapter 2 | select',
      description: 'intro',
      pageClass: 'd3-cb-ch02-select'
    }

block main
  article.container
    h1
      scratch d3 ch01
    header
      :markdown-it(linkify langPrefix='highlight-')
        Let's look into scales. They're just functions that map our numeric data based on the function we provide. they help proportionalize for example. 

      .scales-ex
        <div id="linear" class="clear"><span>n</span></div>
        <div id="linear-capped" class="clear">
          <span>1 &lt;= a*n + b &lt;= 20</span>
        </div>
        <div id="pow" class="clear"><span>n^2</span></div>
        <div id="pow-capped" class="clear">
          <span>1 &lt;= a*n^2 + b &lt;= 10</span>
        </div>
        <div id="log" class="clear"><span>log(n)</span></div>
        <div id="log-capped" class="clear">
          <span>1 &lt;= a*log(n) + b &lt;= 10</span>
        </div>




block footer_scripts

  script(type="text/javascript")(src="//d3js.org/d3.v5.min.js").
  script.js-main(type="text/javascript")(nonce="some-nonce").
    var max = 11, data = [];
    for (var i = 1; i < max; ++i) data.push(i);  // data ===  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    // so data is our data 

    
    // first we set up the scaler function 
    // we'll map each element in it (or at least witin our rane selection of it) to a new value 
    // based on a scale function 
    // there are ten elements and the domain / range are limited 
    // so this is basically f(x) = x;
    var linear = d3.scaleLinear() // <-A
        .domain([1, 10]) // <-B // the default domain seems to be [0,100]
        .range([1, 10]); // <-C . the default range is [0, 1]        
      
    // here we expanded the range to 1-20. so
    var linearCapped = d3.scaleLinear()
        .domain([1, 10])        
        .range([1, 20]); // <-D
        
    var pow = d3.scalePow().exponent(2); // <-E
    var powCapped = d3.scalePow() // <-F
        .exponent(2)
        .domain([1, 10])
        .rangeRound([1, 10]); // <-G
        
    var log = d3.scaleLog(); // <-H
    var logCapped = d3.scaleLog() // <-I
        .domain([1, 10])
        .rangeRound([1, 10]);
        
        
    // so far we have mappings 
    function render(data, scale, selector) {
        d3.select(selector).selectAll("div")
                    .data(data)
                .enter()
                .append("div")
                    .classed("cell", true)
                    .style("display", "inline-block")
                    .text(function (d) {
                       // displaying the number in format (2 significant figures ). scaling it
                        return d3.format(".2")(scale(d), 2);
                    });
    }
    
    //let's start visualizing these 
    // first up is the linear scaling 
    // notice we pass 
    render(data, linear, "#linear");
    render(data, linearCapped, "#linear-capped");
    render(data, pow, "#pow");
    render(data, powCapped, "#pow-capped");
    render(data, log, "#log");
    render(data, logCapped, "#log-capped"); 
    // called at the last line
